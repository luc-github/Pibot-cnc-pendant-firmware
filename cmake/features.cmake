# DO NOT EDIT THIS FILE

# ===========================================
# Firmware target configuration
# ===========================================
if(TARGET_FW_MARLIN)
    add_compile_options(-DTARGET_IS_MARLIN=1)
    if(TFT_UI_SERVICE)
        add_compile_options("-I${CMAKE_SOURCE_DIR}/main/display/3dprinter/marlin")
    endif()
    add_compile_options("-I${CMAKE_SOURCE_DIR}/main/target/3dprinter/marlin")
elseif(TARGET_FW_REPETIER)
    add_compile_options(-DTARGET_IS_REPETIER=1)
    if(TFT_UI_SERVICE)
        add_compile_options("-I${CMAKE_SOURCE_DIR}/main/display/3dprinter/repetier")
    endif()
    add_compile_options("-I${CMAKE_SOURCE_DIR}/main/target/3dprinter/repetier")
elseif(TARGET_FW_SMOOTHIEWARE)
    add_compile_options(-DTARGET_IS_SMOOTHIEWARE=1)
    if(TFT_UI_SERVICE)
        add_compile_options("-I${CMAKE_SOURCE_DIR}/main/display/3dprinter/smoothieware")
    endif()
    add_compile_options("-I${CMAKE_SOURCE_DIR}/main/target/3dprinter/smoothieware")
elseif(TARGET_FW_GRBL)
    add_compile_options(-DTARGET_IS_GRBL=1)
    if(TFT_UI_SERVICE)
        add_compile_options("-I${CMAKE_SOURCE_DIR}/main/display/cnc/grbl")
    endif()
    add_compile_options("-I${CMAKE_SOURCE_DIR}/main/target/cnc/grbl")
elseif(TARGET_FW_GRBLHAL)
    add_compile_options(-DTARGET_IS_GRBLHAL=1)
    if(TFT_UI_SERVICE)
        add_compile_options("-I${CMAKE_SOURCE_DIR}/main/display/cnc/grblhal")
    endif()
    add_compile_options("-I${CMAKE_SOURCE_DIR}/main/target/cnc/grblhal")
elseif(TARGET_FW_FLUIDNC)
    add_compile_options(-DTARGET_IS_FLUIDNCL=1)
    if(TFT_UI_SERVICE)
        add_compile_options("-I${CMAKE_SOURCE_DIR}/main/display/cnc/fluidnc")
    endif()
    add_compile_options("-I${CMAKE_SOURCE_DIR}/main/target/cnc/fluidnc")
endif()

# ===========================================
# Development tools
# ===========================================
include(cmake/dev_tools.cmake)

# ===========================================
# Core Features
# ===========================================
# File system selection
if(USE_FAT_INSTEAD_OF_LITTLEFS)
    add_compile_options(-DESP3D_FATFS_FEATURE=1)
else()
    add_compile_options(-DESP3D_LITTLEFS_FEATURE=1)
endif()

# Authentication
if(ESP3D_AUTHENTICATION)
    add_compile_options(-DESP3D_AUTHENTICATION_FEATURE=1)
endif()

if(DISABLE_SERIAL_AUTHENTICATION)
    add_compile_options(-DESP3D_DISABLE_SERIAL_AUTHENTICATION_FEATURE=1)
endif()

# Time service
if(TIME_SERVICE)
    add_compile_options(-DESP3D_TIMESTAMP_FEATURE=1)
endif()

# Serial Communication service
if(SERIAL_SERVICE)
    add_compile_options(-DESP3D_SERIAL_FEATURE=1)
endif()

# ===========================================
# Network Services
# ===========================================
if(BT_SERVICE)
    add_compile_options(-DESP3D_BT_FEATURE=1)
endif()
if(WIFI_SERVICE)
    add_compile_options(-DESP3D_WIFI_FEATURE=1)

    if(SSDP_SERVICE)
        add_compile_options(-DESP3D_SSDP_FEATURE=1)
    endif()

    if(MDNS_SERVICE)
        add_compile_options(-DESP3D_MDNS_FEATURE=1)
    endif()

    if(WEB_SERVICES)
        add_compile_options(-DESP3D_HTTP_FEATURE=1)
        if(WS_SERVICE)
            add_compile_options(-DESP3D_WS_SERVICE_FEATURE=1)
        endif()
        if(WEBDAV_SERVICES)
            add_compile_options(-DESP3D_WEBDAV_SERVICES_FEATURE=1)
        endif()
        if(CAMERA_SERVICE)
            add_compile_options(-DESP3D_CAMERA_FEATURE=1)
        endif()
    endif()
    if(TELNET_SERVICE)
        add_compile_options(-DESP3D_TELNET_FEATURE=1)
    endif()

    if(NOTIFICATIONS_SERVICE)
        add_compile_options(-DESP3D_NOTIFICATIONS_FEATURE=1)
    endif()
endif()

if(BT_SERVICE)
    add_compile_options(-DESP3D_BLUETOOTH_FEATURE=1)
endif()

# ===========================================
# User Interface
# ===========================================
if(TFT_UI_SERVICE)
    add_compile_options(-DESP3D_DISPLAY_FEATURE=1)
    if(TFT_TOUCH_SERVICE)
        add_compile_options(-DESP3D_TOUCH_FEATURE=1)
    endif()
    if (TFT_BRIGHTNESS_CONTROL)
        add_compile_options(-DESP3D_BRIGHTNESS_CONTROL_FEATURE=1)
    endif()
    # For lvgl_conf to use simple path
    add_compile_options(-DLV_CONF_INCLUDE_SIMPLE=1)
    add_compile_options(-DLV_LVGL_H_INCLUDE_SIMPLE=1)
    add_compile_options("-I${CMAKE_SOURCE_DIR}/main/display")
else()
    add_compile_options(-DLV_CONF_SUPPRESS_DEFINE_CHECK=1)
endif()

if (HARDWARE_BUTTONS)
    add_compile_options(-DESP3D_HARDWARE_BUTTONS_FEATURE=1)
    endif()
if (HARDWARE_ENCODER)
    add_compile_options(-DESP3D_HARDWARE_ENCODER_FEATURE=1)
endif()
if (HARDWARE_SWITCH)
    add_compile_options(-DESP3D_HARDWARE_SWITCH_FEATURE=1)
endif()
if (HARDWARE_POTENTIOMETER)
    add_compile_options(-DESP3D_HARDWARE_POTENTIOMETER_FEATURE=1)   
endif()


# ===========================================
# Storage and Updates
# ===========================================
if(SD_CARD_SERVICE)
    add_compile_options(-DESP3D_SD_CARD_FEATURE=1)
    if(UPDATE_SERVICE)
        add_compile_options(-DESP3D_UPDATE_FEATURE=1)
    endif()
else()
    unset(UPDATE_SERVICE CACHE)
endif()

# ===========================================
# Additional Services
# ===========================================
if(BUZZER_SERVICE)
    add_compile_options(-DESP3D_BUZZER_FEATURE=1)
endif()

# ===========================================
# Customizations
# ===========================================
add_compile_options("-I${CMAKE_SOURCE_DIR}/customizations")
add_compile_options(-DTFT_TARGET="${TFT_TARGET}")

# ===========================================
# Configuration Check
# ===========================================
include(cmake/sanity_check.cmake)

# ===========================================
# Component Versions
# ===========================================
message(STATUS "")
message(STATUS "${BoldCyan}Components Versions:${ColourReset}")
message(STATUS "${Cyan}------------------------${ColourReset}")

# Path to components
set(COMPONENTS_PATH "${CMAKE_SOURCE_DIR}/components")

# CHeck if exists
if(EXISTS ${COMPONENTS_PATH} AND IS_DIRECTORY ${COMPONENTS_PATH})
    # List all sub directories
    file(GLOB SUBDIRS "${COMPONENTS_PATH}/*")
    
    foreach(SUBDIR ${SUBDIRS})
        # Is directory
        if(IS_DIRECTORY ${SUBDIR})
            # Extract name
            get_filename_component(SUBDIR_NAME ${SUBDIR} NAME)
            # path to library.json
            set(LIBRARY_JSON "${COMPONENTS_PATH}/${SUBDIR_NAME}/library.json")
            if(EXISTS ${LIBRARY_JSON})
                # Lit le fichier JSON
                file(READ ${LIBRARY_JSON} JSON_CONTENT)
                # looking for entries 'name' et 'version'
                string(JSON COMPONENT_NAME ERROR_VARIABLE NAME_ERROR GET ${JSON_CONTENT} name)
                string(JSON COMPONENT_VERSION ERROR_VARIABLE VERSION_ERROR GET ${JSON_CONTENT} version)
                if(NOT NAME_ERROR AND NOT VERSION_ERROR)
                    string(JSON COMPONENT_NAME GET ${JSON_CONTENT} name)
                    string(JSON COMPONENT_VERSION GET ${JSON_CONTENT} version)
                    message(STATUS "${Cyan}${COMPONENT_NAME}: ${White}${COMPONENT_VERSION}${ColourReset}")
                else()
                    message(STATUS "${Cyan}Skipping ${SUBDIR_NAME}: ${White}Missing 'name' or 'version' in library.json${ColourReset}")
                endif()
            else()
                message(STATUS "${Cyan}Skipping ${SUBDIR_NAME}: ${White}No library.json found${ColourReset}")
            endif()
        endif()
    endforeach()
else()
    message(STATUS "${Cyan}Directory not found: ${White}${COMPONENTS_PATH}${ColourReset}")
endif()

message(STATUS "${Cyan}------------------------${ColourReset}")

# ===========================================
# Configuration Summary
# ===========================================
# ===========================================
# Final Configuration Summary
# ===========================================
set(IDF_VERSION "${IDF_VERSION_MAJOR}.${IDF_VERSION_MINOR}.${IDF_VERSION_PATCH}")
message(STATUS "")
message(STATUS "${BoldCyan}Configuration Summary:${ColourReset}")
message(STATUS "${Cyan}------------------------${ColourReset}")
message(STATUS "${Cyan}PROJECT_NAME:  ${White}ESP3D TFT${ColourReset}")
message(STATUS "${Cyan}Hardware Target: ${White}${board_target}${ColourReset}")
message(STATUS "${Cyan}Firmware Target: ${White}${fw_target}${ColourReset}")
message(STATUS "${Cyan}Platform: ${White}${IDF_TARGET}${ColourReset}")
message(STATUS "${Cyan}ESP-IDF version: ${White} ${IDF_VERSION}${ColourReset}")
message(STATUS "${Cyan}WiFi:  ${White}${WIFI_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}Bluetooth:  ${White}${BT_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}TFT UI:  ${White}${TFT_UI_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}TFT Touch:  ${White}${TFT_TOUCH_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}TFT Brightness Control:  ${White}${TFT_BRIGHTNESS_CONTROL} ${ColourReset}")
message(STATUS "${Cyan}SD Card:  ${White}${SD_CARD_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}Update Service:  ${White}${UPDATE_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}Use FAT instead of LittleFS: ${White}${USE_FAT_INSTEAD_OF_LITTLEFS} ${ColourReset}")
message(STATUS "${Cyan}Authentication:  ${White}${ESP3D_AUTHENTICATION} ${ColourReset}")
message(STATUS "${Cyan}Time Service:  ${White}${TIME_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}SSDP Service:  ${White}${SSDP_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}MDNS Service:  ${White}${MDNS_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}Web Services:  ${White}${WEB_SERVICES} ${ColourReset}")
message(STATUS "${Cyan}Camera Service:  ${White}${CAMERA_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}Buzzer Service:  ${White}${BUZZER_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}Rotary encoder Service:  ${White}${HARDWARE_ENCODER} ${ColourReset}")
message(STATUS "${Cyan}Hardware Buttons:  ${White}${HARDWARE_BUTTONS} ${ColourReset}")
message(STATUS "${Cyan}Hardware Switch:  ${White}${HARDWARE_SWITCH} ${ColourReset}")
message(STATUS "${Cyan}Hardware Potentiometer:  ${White}${HARDWARE_POTENTIOMETER} ${ColourReset}")





























message(STATUS "${Cyan}WebDav Services:  ${White}${WEBDAV_SERVICES} ${ColourReset}")
message(STATUS "${Cyan}Telnet Service:  ${White}${TELNET_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}WebSocket Service:  ${White}${WS_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}Notifications Service:  ${White}${NOTIFICATIONS_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}Serial Service:  ${White}${SERIAL_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}USB Serial Service:  ${White}${USB_SERIAL_SERVICE} ${ColourReset}")
message(STATUS "${Cyan}------------------------${ColourReset}")
message(STATUS "")

# ===========================================
# Development  Configuration Summary
# ===========================================
if(ESP3D_TFT_LOG_LEVEL EQUAL 0)
    set(TFT_LOG_LEVEL_STATUS "Disabled")
else()
    set(TFT_LOG_LEVEL_STATUS "${ESP3D_TFT_LOG_LEVEL}")
endif()
if (DISABLE_COLOR_LOG EQUAL 1)
    set(TFT_LOG_COLOR_STATUS "Disabled")
else()
    set(TFT_LOG_COLOR_STATUS "Enabled")
endif()
if (LV_USE_SNAPSHOT EQUAL 1)
    set(TFT_LVGL_SNAPSHOT_STATUS "Enabled")
else()
    set(TFT_LVGL_SNAPSHOT_STATUS "Disabled")
endif()
if (ESP3D_TFT_BENCHMARK EQUAL 1)
    set(TFT_BENCHMARK_STATUS "Enabled")
else()
    set(TFT_BENCHMARK_STATUS "Disabled")
endif()
if (DISABLE_TELNET_WELCOME_MESSAGE EQUAL 1)
    set(TFT_TELNET_WELCOME_MESSAGE_STATUS "Disabled")
else()
    set(TFT_TELNET_WELCOME_MESSAGE_STATUS "Enabled")
endif() 

message(STATUS "")
message(STATUS "${BoldCyan}Development Configuration Summary:${ColourReset}")
message(STATUS "${Cyan}------------------------${ColourReset}")
message(STATUS "${Cyan}Log Level:  ${White}${TFT_LOG_LEVEL_STATUS}${ColourReset}")
message(STATUS "${Cyan}ANSI Color in Logs:  ${White}${TFT_LOG_COLOR_STATUS}${ColourReset}")
if (TFT_UI_SERVICE)
message(STATUS "${Cyan}LVGL Snapshot:  ${White}${TFT_LVGL_SNAPSHOT_STATUS}${ColourReset}")
endif()
message(STATUS "${Cyan}Benchmark:  ${White}${TFT_BENCHMARK_STATUS}${ColourReset}")
if(TELNET_SERVICE)
message(STATUS "${Cyan}Telnet Welcome Message:  ${White}${TFT_TELNET_WELCOME_MESSAGE_STATUS}${ColourReset}")
endif()
message(STATUS "${Cyan}------------------------${ColourReset}")
message(STATUS "")
